const EMPTY_STRING = ""; class AsitDebugStream { indentation = 0; silent = !1; style; constructor(t, e) { this.style = t || AsitDebugStream.getStyle(), e && this.header(e) } header(t) { console.log(this.style.getHeaderIndentation() + "[" + t.toUpperCase() + "]") } log(t, e = 0, n) { if (this.silent) return; let i; Array.isArray(t) && (i = t[0], t = t[1].trim()), t.startsWith("	") || t.endsWith("..") ? e += 1 : t.startsWith(">") ? (e += 1, t = t.slice(1)) : t.startsWith("<") && (e -= 1, t = t.slice(1)), n && (t += "[" + (n.length > 0 ? n.map(t => void 0 == t ? "undefined" : "String" == t.constructor.name ? t : t.constructor.name) : ["_EMPTY_ARRAY_"]).join(", ") + "]"), console.log(i ?? "", this.style.getIndentation(this.indentation).slice(i ? (i.match(RegExp("\x1b", "g")) || []).length : 0) + t), this.indentation = Math.max(this.indentation + e, 0) } error(t, e = 0, n) { this.log(["\x1b[31m", "WARNING: " + t], e, n) } static getStyle(t) { return "box-drawing" === t ? { getIndentation: t => 0 === t ? "│" : "│   ".repeat(t - 1) + (t > 0 ? "├──" : ""), getHeaderIndentation: t => "╭──" } : { getIndentation: t => "   ".repeat(t) + "^--", getHeaderIndentation: () => "^" } } }